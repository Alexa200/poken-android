apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'realm-android'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    // For stetho (https://facebook.github.io/stetho/) Realm Inspector (https://github.com/uPhyca/stetho-realm)
    maven { url 'https://github.com/uPhyca/stetho-realm/raw/master/maven-repo' }
    google()
}

// S: Read keystore file
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
// E: Read keystore file

// S: Load mixed properties
def pokenPropertiesFile = rootProject.file("poken.properties")
def pokenProperties = new Properties()
pokenProperties.load(new FileInputStream(pokenPropertiesFile))
// E: Load mixed properties

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {

    def DEV_HOST = pokenProperties["demoHost"]
    def PRODUCTION_HOST = pokenProperties["productionHost"]

    compileSdkVersion versions.compileSdkVersion
    buildToolsVersion versions.buildToolsVersion

    defaultConfig {

        applicationId "id.unware.poken"

        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion

        versionCode 22
        versionName "0.0.22-beta"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true

        multiDexEnabled true

        resConfigs "en", "id"
    }

    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            // NO FABRIC CRASHLYTICS ON DEBUG
            ext.alwaysUpdateBuildId = false
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }

    // Specifies two flavor dimensions.
    flavorDimensions "market"

    productFlavors {

        development {

            dimension "market"
            applicationIdSuffix ".beta"

            resValue "string", "app_name", "Poken Psp Beta"

            buildConfigField 'Boolean', 'enableCrashlytics', 'true'
            buildConfigField 'Boolean', 'DEV_MODE', 'true'

            buildConfigField 'String', 'session_key', '"ci_session"'
            buildConfigField 'String', 'HOST', DEV_HOST
            buildConfigField 'String', 'FORGET_PASSWORD_URL', '"https://demo.paket.id/login/forgetPass"'

        }

        production {

            dimension "market"

            resValue "string", "app_name", "Poken Psp"

            buildConfigField 'Boolean', 'enableCrashlytics', 'true'
            buildConfigField 'Boolean', 'DEV_MODE', 'true'

            buildConfigField 'String', 'session_key', '"ci_session"'
            buildConfigField 'String', 'HOST', PRODUCTION_HOST
            buildConfigField 'String', 'FORGET_PASSWORD_URL', '"https://demo.paket.id/login/forgetPass"'

        }
    }

    // FORMAT OUTPUT FILE NAME
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = outputFile.name.replace("app",
                        "${defaultConfig.applicationId}_${defaultConfig.versionName}_${releaseTime()}")
                outputFileName = fileName
            }
        }
    }

    splits {

        // Configures multiple APKs based on ABI.
        abi {

            // Enables building multiple APKs per ABI ONLY for Production
            enable gradle.startParameter.taskNames.contains(":app:assembleProductionRelease")

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86, armeabi-v7a, and mips.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "armeabi-v7a", "x86"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk false
        }
    }

    // Fix WARNING: Conflict with dependency 'com.google.code.findbugs:jsr305' in project ':app'.
    // Resolved versions for app (3.0.2) and test app (2.0.1) differ.
    // See http://g.co/androidstudio/app-test-app-conflict for details.
    // Solution ref: https://stackoverflow.com/a/37357786
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

}

// Map for the version code that gives each ABI a value.
ext.abiCodes = ['armeabi-v7a': 3, 'x86': 4]

// For each APK output variant, override versionCode with a combination of
// ext.abiCodes * 1000 + variant.versionCode. In this example, variant.versionCode
// is equal to defaultConfig.versionCode. If you configure product flavors that
// define their own versionCode, variant.versionCode uses that value instead.
import com.android.build.OutputFile
android.applicationVariants.all { variant ->

    variant.outputs.each { output ->
        def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))

        if (baseAbiVersionCode != null) {
            output.versionCodeOverride = baseAbiVersionCode * 1000 + variant.versionCode
        }
    }
}

dependencies {
    // FABRIC
    implementation('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true
    }
    implementation('com.crashlytics.sdk.android:answers:1.3.13@aar') {
        transitive = true
    }

    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation "com.android.support:appcompat-v7:${versions.supportLibVersion}"
    implementation "com.android.support:design:${versions.supportLibVersion}"
    implementation "com.android.support:recyclerview-v7:${versions.supportLibVersion}"
    implementation "com.android.support:cardview-v7:${versions.supportLibVersion}"
    implementation "com.android.support:customtabs:${versions.supportLibVersion}"
    implementation 'com.android.support:multidex:1.0.1'
    implementation "com.google.firebase:firebase-core:${versions.firebaseVersion}"
    implementation "com.google.firebase:firebase-auth:${versions.firebaseVersion}"
    implementation "com.google.android.gms:play-services-location:${versions.playServicesVersion}"
    implementation "com.google.android.gms:play-services-places:${versions.playServicesVersion}"
    implementation "com.google.android.gms:play-services-gcm:${versions.playServicesVersion}"
    implementation "com.google.android.gms:play-services-maps:${versions.playServicesVersion}"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.jakewharton:butterknife:8.5.1'
    implementation 'com.squareup.retrofit2:retrofit:2.2.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.2.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    implementation 'com.squareup.okhttp3:okhttp:3.4.1'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.devacone.permissionhelper:permissionhelperlib:0.0.3'
    implementation 'com.pacioianu.david:ink-page-indicator:1.2.0'
    implementation 'com.github.rubensousa:gravitysnaphelper:1.3'
    implementation "com.facebook.android:facebook-android-sdk:${versions.facebookSdkVersion}"
    implementation "com.facebook.android:account-kit-sdk:${versions.facebookSdkVersion}"
    implementation 'com.alexvasilkov:gesture-views:2.3.1'
    implementation "com.github.bumptech.glide:glide:${versions.glideVersion}"
    annotationProcessor "com.github.bumptech.glide:compiler:${versions.glideVersion}"
    implementation("com.github.bumptech.glide:recyclerview-integration:${versions.glideVersion}") {
        // Excludes the support library because it's already included by Glide.
        transitive = false
    }
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
    debugImplementation 'com.facebook.stetho:stetho:1.5.0'
    debugImplementation 'com.facebook.stetho:stetho-okhttp3:1.5.0'
    debugImplementation 'com.uphyca:stetho_realm:2.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
}

// Firebase for google-services.json parser
apply plugin: 'com.google.gms.google-services'

