apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'realm-android'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    // For stetho (https://facebook.github.io/stetho/) Realm Inspector (https://github.com/uPhyca/stetho-realm)
    maven { url 'https://github.com/uPhyca/stetho-realm/raw/master/maven-repo' }

    maven {
        name 'glide-snapshot'
        url 'http://oss.sonatype.org/content/repositories/snapshots'
    }
}

// S: Read keystore file
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
// E: Read keystore file

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    dexOptions {
        jumboMode true
    }

    defaultConfig {

        applicationId "id.unware.poken"

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        versionCode 11
        versionName "0.0.8-beta"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = false

        resConfigs "en", "id", "xxhdpi"

        buildConfigField 'String', 'USER_EMAIL', '"anwar"'
        buildConfigField 'String', 'USER_PASSWORD', '"poken_psp17"'
    }

    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }

    productFlavors {

        development {

            // applicationIdSuffix ".beta"

            resValue "string", "app_name", "Poken Psp Beta"

            // FOR DEBUG PURPOSE
            resConfigs "id", "xxhdpi"

            buildConfigField 'Boolean', 'enableCrashlytics', 'true'
            buildConfigField 'Boolean', 'DEV_MODE', 'true'

            buildConfigField 'String', 'session_key', '"ci_session"'
            buildConfigField 'String', 'HOST', '"http://192.168.1.101:8000/poken_rest/"'
            buildConfigField 'String', 'FORGET_PASSWORD_URL', '"https://demo.paket.id/login/forgetPass"'

        }

        production {
            resValue "string", "app_name", "Poken Psp"

            buildConfigField 'Boolean', 'enableCrashlytics', 'true'
            buildConfigField 'Boolean', 'DEV_MODE', 'true'

            buildConfigField 'String', 'session_key', '"ci_session"'
            buildConfigField 'String', 'HOST', '"http://139.59.245.162:80/poken_rest/"'
            buildConfigField 'String', 'FORGET_PASSWORD_URL', '"https://demo.paket.id/login/forgetPass"'

        }
    }

    // FORMAT OUTPUT FILE NAME
    // ref: https://stackoverflow.com/a/40016854
    // ex. output: myProject_dev_debug_1.3.6_131016_1047.apk
    applicationVariants.all { variant ->
        variant.outputs.each { output ->

            // get the key for the abi component
            def abiKey = output.getFilter(OutputFile.ABI) == null ? "all" : output.getFilter(OutputFile.ABI)

            def project = "poken-psp"
            def SEP = "-"
            def flavor = variant.productFlavors[0].name
            def buildType = variant.variantData.variantConfiguration.buildType.name
            def version = variant.versionName + " (" + variant.versionCode + ")"

            def newApkName = project + SEP + flavor + SEP + buildType + SEP + abiKey + SEP + version + ".apk"

            output.outputFile = new File(output.outputFile.parent, newApkName)
        }
    }

    // DISABLE PNG CRUCHING ON DEBUG MODE
    if (project.hasProperty('devBuild')) {
        aaptOptions.cruncherEnabled = false
    }

    splits {

        // Configures multiple APKs based on ABI.
        abi {

            // Enables building multiple APKs per ABI ONLY for Production
            enable gradle.startParameter.taskNames.contains(":app:assembleProductionRelease")

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86, armeabi-v7a, and mips.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "armeabi", "armeabi-v7a"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk false
        }
    }

}

// Map for the version code that gives each ABI a value.
ext.abiCodes = ['armeabi': 2, 'armeabi-v7a': 3]

import com.android.build.OutputFile

// For each APK output variant, override versionCode with a combination of
// ext.abiCodes * 1000 + variant.versionCode. In this example, variant.versionCode
// is equal to defaultConfig.versionCode. If you configure product flavors that
// define their own versionCode, variant.versionCode uses that value instead.
android.applicationVariants.all { variant ->

    // Assigns a different version code for each output APK
    // other than the universal APK.
    variant.outputs.each { output ->

        // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
        def baseAbiVersionCode =
                // Determines the ABI for this variant and returns the mapped value.
                project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))

        // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
        // the following code does not override the version code for universal APKs.
        // However, because we want universal APKs to have the lowest version code,
        // this outcome is desirable.
        if (baseAbiVersionCode != null) {

            // Assigns the new version code to versionCodeOverride, which changes the version code
            // for only the output APK, not for the variant itself. Skipping this step simply
            // causes Gradle to use the value of variant.versionCode for the APK.
            output.versionCodeOverride =
                    baseAbiVersionCode * 1000 + variant.versionCode
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    // FABRIC
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
    compile('com.crashlytics.sdk.android:answers:1.3.13@aar') {
        transitive = true;
    }
    compile ("com.github.bumptech.glide:recyclerview-integration:$rootProject.ext.glideVersion") {
        // Excludes the support library because it's already included by Glide.
        transitive = false
    }
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    //ANDROID SUPPORT LIBRARY
    compile "com.android.support:appcompat-v7:$rootProject.ext.supportLibVersion"
    compile "com.android.support:design:$rootProject.ext.supportLibVersion"
    compile "com.android.support:recyclerview-v7:$rootProject.ext.supportLibVersion"
    compile "com.android.support:cardview-v7:$rootProject.ext.supportLibVersion"
    compile "com.android.support:customtabs:$rootProject.ext.supportLibVersion"
    //PLAY SERVICES / FIREBASE
    compile "com.google.firebase:firebase-core:$rootProject.ext.playServicesVersion"
    compile "com.google.android.gms:play-services-location:$rootProject.ext.playServicesVersion"
    compile "com.google.android.gms:play-services-places:$rootProject.ext.playServicesVersion"
    compile "com.google.android.gms:play-services-gcm:$rootProject.ext.playServicesVersion"
    compile "com.google.android.gms:play-services-maps:$rootProject.ext.playServicesVersion"
    compile "com.google.android.gms:play-services-auth:$rootProject.ext.playServicesVersion"
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.jakewharton:butterknife:8.5.1'
    compile 'com.squareup.retrofit2:retrofit:2.2.0'
    compile 'com.squareup.retrofit2:converter-gson:2.2.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    compile 'com.squareup.okhttp3:okhttp:3.4.1'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.devacone.permissionhelper:permissionhelperlib:0.0.3'
    compile 'com.pacioianu.david:ink-page-indicator:1.2.0'
    compile 'com.github.rubensousa:gravitysnaphelper:1.3'
    compile 'com.facebook.android:facebook-android-sdk:4.23.0'
    compile 'com.alexvasilkov:gesture-views:2.3.1'
    compile "com.github.bumptech.glide:glide:$rootProject.ext.glideVersion"
    annotationProcessor "com.github.bumptech.glide:compiler:$rootProject.ext.glideVersion"
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
    debugCompile 'com.facebook.stetho:stetho:1.5.0'
    debugCompile 'com.facebook.stetho:stetho-okhttp3:1.5.0'
    debugCompile 'com.uphyca:stetho_realm:2.0.0'
    testCompile 'junit:junit:4.12'
}

// Firebase for google-services.json parser
apply plugin: 'com.google.gms.google-services'
